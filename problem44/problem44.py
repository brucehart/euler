# -*- coding: utf-8 -*-
#Author: Bruce Hart <bruce.hart@gmail.com>

#Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
#
#1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
# D = |Pk − Pj| is minimised; what is the value of D?

import time
import math

def binary_search(A, key, min, max):
    if (max < min):
        return -1
    else:
        mid = (max+min)/2

        if (mid >= len(A)):
            return -1

        if (A[mid] > key):
            return binary_search(A, key, min, mid-1)
        elif (A[mid] < key):
            return binary_search(A, key, mid+1, max)
        else:
            return mid

def generate_pentagonals(maxN):
    vals = []
    n = 1

    while (n <= maxN):
        vals.append(int(n*(3*n-1)/2))
        n = n + 1

    return vals

def euler44():
    pent_nums = generate_pentagonals(5*10**3)

    for j in range(0, len(pent_nums)):
        for k in range(j+1, len(pent_nums)):
            if ((binary_search(pent_nums, pent_nums[j] + pent_nums[k], 0, len(pent_nums)) > 0) and
                (binary_search(pent_nums, abs(pent_nums[j] - pent_nums[k]), 0, len(pent_nums)) > 0)):
                print abs(pent_nums[j] - pent_nums[k])
                return

if __name__ == '__main__':
    time.clock()
    euler44()
    print "Executed in {0} sec".format(time.clock())